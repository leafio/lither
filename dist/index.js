const e=e=>{var t;const r=[];return null===(t=e.match(/\:([^:\/\d]+)\/?/g))||void 0===t||t.forEach((e=>{r.push(e.replace(/\//g,"").replace(/:/g,""))})),r};function t(t,r={},o){const s="Content-Type";let n={isTimeout:!1},a=null==o?void 0:o.timeout,i={...r,timeout:a};const{beforeRequest:l,afterResponse:u}=o||{};l&&(i=l(i));const c=new AbortController;let d=i.signal;i.signal=c.signal;const p=e=>{c.abort(e)};let h;null==d||d.addEventListener("abort",p),a=i.timeout,a&&(h=setTimeout((()=>{n.isTimeout=!0,c.abort("timeout")}),a));const f=()=>{h&&(clearTimeout(h),h=void 0),null==d||d.removeEventListener("abort",p)},m=(e,t,r)=>{u?u(e,{resolve:t,reject:r}):(e.ok&&t(e.body),r(e))};return new Promise(((r,a)=>{let l=t;if(e(t).forEach((e=>{i.params&&i.params[e]?l=l.replace(":"+e,""+i.params[e]):(n.error="need url path params key:"+e,m(n,r,a))})),i.query){const e=[];Object.entries(i.query).forEach((([t,r])=>{Array.isArray(r)?r.forEach((r=>{e.push([t,r])})):void 0!==r&&e.push([t,r])}));const t=new URLSearchParams(e);l=l+(l.includes("?")?"&":"?")+t,l.replace("&&","&")}let u=null==o?void 0:o.baseURL;u&&0!==l.trim().indexOf("http")&&(l=u+("/"===u[u.length-1]?"":"/")+("/"===l[0]?l.slice(1):l));let c=!1;const d=i.body;d&&(d instanceof Blob||d instanceof ArrayBuffer||d instanceof FormData||"string"==typeof d||(c=!0,i.body=JSON.stringify(d)));const p=i.headers||new Headers;let h=(null==o?void 0:o.auth)?o.auth():void 0;if(h)if("string"==typeof h)p.set("Authorization",h);else for(const[e,t]of h.entries())p.set(e,t);c&&p.set(s,"application/json"),i.headers=p,fetch(l,i).then((e=>{if(n={ok:e.ok,headers:e.headers,redirected:e.redirected,status:e.status,statusText:e.statusText,type:e.type,url:e.url,body:"",isTimeout:!1},i.responseHandler)return e[i.responseHandler]();{let t=e.headers.get(s);return(null==t?void 0:t.includes("json"))?e.json():e.text()}})).then((e=>{f(),n={...n,body:e},m(n,r,a)})).catch((e=>{f(),m({...n,error:e},r,a)}))}))}function r(r={}){const s=(e,o)=>{var n;return t(e,o,null!==(n=s.baseInit)&&void 0!==n?n:r)};s.baseInit=r;const n=(e,r)=>t(e,r,s.baseInit),a=["get","post","put","delete","patch"];return a.forEach((e=>{s[e]=(t,r,o)=>n(t,{["get"===e?"query":"body"]:r,method:e,...o})})),s.request=n,s.API=t=>{const r={},s=!!e(t).length;return a.forEach((e=>{const n=e.toUpperCase();r[n]=()=>(...r)=>{let[n,a]=r;return o[e](t,s?a:n,{params:s?n:void 0})}})),r},s}const o=r();export{r as createLither,o as lither,t as litherFetch};
